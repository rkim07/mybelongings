import { ValidatorOptions } from "class-validator";
import { ActionMetadata } from "./ActionMetadata";
import { ParamMetadataArgs } from "./args/ParamMetadataArgs";
import { ParamType } from "./types/ParamTypes";
import { ClassTransformOptions } from "class-transformer";
export declare class ParamMetadata {
    /**
     * Parameter's action.
     */
    actionMetadata: ActionMetadata;
    /**
     * Object on which's method's parameter this parameter is attached.
     */
    object: any;
    /**
     * Method on which's parameter is attached.
     */
    method: string;
    /**
     * Index (# number) of the parameter in the method signature.
     */
    index: number;
    /**
     * Parameter type.
     */
    type: ParamType;
    /**
     * Reflected type of the parameter.
     */
    reflectedType: any;
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter format.
     */
    format: any;
    /**
     * Parameter target.
     */
    target: any;
    /**
     * Specifies if parameter should be parsed as json or not.
     */
    parseJson: boolean;
    /**
     * Indicates if this parameter is required or not
     */
    isRequired: boolean;
    /**
     * Transforms the value.
     */
    transform: (value?: any, request?: any, response?: any) => Promise<any> | any;
    /**
     * Additional parameter options. For example it can be uploading options.
     */
    extraOptions: any;
    /**
     * Class transform options used to perform plainToClass operation.
     */
    classTransformOptions: ClassTransformOptions;
    /**
     * If true, class-validator will be used to validate param object.
     */
    validate: boolean;
    /**
     * Class-validator options used to transform and validate param object.
     */
    validationOptions: ValidatorOptions;
    constructor(actionMetadata: ActionMetadata, args: ParamMetadataArgs);
}
