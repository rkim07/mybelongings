"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var class_transformer_1 = require("class-transformer");
var class_validator_1 = require("class-validator");
var BodyRequiredError_1 = require("./error/BodyRequiredError");
var BadRequestError_1 = require("./error/http/BadRequestError");
var ParameterParseJsonError_1 = require("./error/ParameterParseJsonError");
var ParameterRequiredError_1 = require("./error/ParameterRequiredError");
var ParamTypes_1 = require("./metadata/types/ParamTypes");
/**
 * Helps to handle parameters.
 */
var ParamHandler = (function () {
    // -------------------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------------------
    function ParamHandler(driver) {
        this.driver = driver;
    }
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    ParamHandler.prototype.handleParam = function (actionOptions, param) {
        var request = actionOptions.request;
        var response = actionOptions.response;
        if (param.type === ParamTypes_1.ParamTypes.REQUEST)
            return Promise.resolve(request);
        if (param.type === ParamTypes_1.ParamTypes.RESPONSE)
            return Promise.resolve(response);
        var value, originalValue;
        value = originalValue = this.driver.getParamFromRequest(actionOptions, param);
        var isValueEmpty = value === null || value === undefined || value === "";
        var isValueEmptyObject = value instanceof Object && Object.keys(value).length === 0;
        if (!isValueEmpty)
            value = this.handleParamFormat(value, param);
        // check cases when parameter is required but its empty and throw errors in such cases
        if (param.isRequired) {
            // todo: make better error messages here
            if (param.name && isValueEmpty) {
                return Promise.reject(new ParameterRequiredError_1.ParameterRequiredError(request.url, request.method, param.name));
            }
            else if (!param.name && (isValueEmpty || isValueEmptyObject)) {
                return Promise.reject(new BodyRequiredError_1.BodyRequiredError(request.url, request.method));
            }
        }
        // if transform function is given for this param then apply it
        if (param.transform)
            value = param.transform(value, request, response);
        var promiseValue = value instanceof Promise ? value : Promise.resolve(value);
        return promiseValue.then(function (value) {
            if (param.isRequired && originalValue !== null && originalValue !== undefined && isValueEmpty) {
                // TODO: handleResultOptions.errorHttpCode = 404; // maybe throw ErrorNotFoundError here?
                var contentType = param.reflectedType && param.reflectedType.name ? param.reflectedType.name : "content";
                var message = param.name ? " with " + param.name + "='" + originalValue + "'" : "";
                return Promise.reject("Requested " + (contentType + message) + " was not found");
            }
            return value;
        });
    };
    // -------------------------------------------------------------------------
    // Private Methods
    // -------------------------------------------------------------------------
    ParamHandler.prototype.handleParamFormat = function (value, param) {
        var format = param.format;
        var formatName = format instanceof Function && format.name ? format.name : format instanceof String ? format : "";
        switch (formatName.toLowerCase()) {
            case "number":
                return +value;
            case "string":
                return value;
            case "boolean":
                if (value === "true") {
                    return true;
                }
                else if (value === "false") {
                    return false;
                }
                return !!value;
            default:
                var isObjectFormat = format instanceof Function || formatName.toLowerCase() === "object";
                if (value && (param.parseJson || isObjectFormat))
                    value = this.parseValue(value, param);
        }
        return value;
    };
    ParamHandler.prototype.parseValue = function (value, paramMetadata) {
        return __awaiter(this, void 0, void 0, function () {
            var valueObject, parsedValue_1, options, options;
            return __generator(this, function (_a) {
                try {
                    valueObject = typeof value === "string" ? JSON.parse(value) : value;
                    // If value is already by instance of target class, then skip the plain to class step.
                    if (!(value instanceof paramMetadata.format) && paramMetadata.format !== Object && paramMetadata.format && this.driver.useClassTransformer) {
                        options = paramMetadata.classTransformOptions || this.driver.plainToClassTransformOptions;
                        parsedValue_1 = class_transformer_1.plainToClass(paramMetadata.format, valueObject, options);
                    }
                    else {
                        parsedValue_1 = valueObject;
                    }
                    if (paramMetadata.validate || this.driver.enableValidation) {
                        options = paramMetadata.validationOptions || this.driver.validationOptions;
                        return [2 /*return*/, class_validator_1.validateOrReject(parsedValue_1, options)
                                .then(function () { return parsedValue_1; })
                                .catch(function (validationErrors) {
                                var error = new BadRequestError_1.BadRequestError("Invalid " + paramMetadata.type + ", check 'details' property for more info.");
                                error.details = validationErrors;
                                throw error;
                            })];
                    }
                    else {
                        return [2 /*return*/, parsedValue_1];
                    }
                }
                catch (er) {
                    throw new ParameterParseJsonError_1.ParameterParseJsonError(paramMetadata.name, value);
                }
                return [2 /*return*/];
            });
        });
    };
    return ParamHandler;
}());
exports.ParamHandler = ParamHandler;

//# sourceMappingURL=ParamHandler.js.map
