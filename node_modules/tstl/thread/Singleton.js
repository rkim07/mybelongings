"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Singleton = void 0;
//================================================================ 
/**
 * @packageDocumentation
 * @module std
 */
//================================================================
var Mutex_1 = require("./Mutex");
var UniqueLock_1 = require("./UniqueLock");
/**
 * Asynchronous Singleton Generator.
 *
 * The `Singleton` is an asynchronous singleton generator class who guarantees the *lazy
 * constructor* to be called *"only one at time"*. The *"only one at time"* would always be
 * kepted, even in the race condition.
 *
 * Create a `Singleton` instance with your custom *lazy constructor* and get the promised value
 * through the {@link Singleton.get}() method. The {@link Singleton.get}() method would construct
 * the return value following below logics:
 *
 *   - At the first time: calls the *lazy constructor* and returns the value.
 *   - After the *lazy construction*: returns the pre-constructed value.
 *   - Race condition:
 *     - simultaneously call happens during the *lazy construction*.
 *     - guarantees the *"only one at time"* through a *mutex*.
 *
 * If you want to reload the promised value, regardless of whether the *lazy construction* has
 * been completed or not, call the {@link Singleton.reload}() method. It would call the *lazy
 * constructor* forcibly, even if the *lany construction* has been completed in sometime.
 *
 * @template T Type of the promised value to be lazy-constructed.
 * @author Jeongho Nam - https://github.com/samchon
 */
var Singleton = /** @class */ (function () {
    /* ---------------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------------- */
    /**
     * Initializer Constructor.
     *
     * Create a new `Singleton` instance with the *lazy consturctor*.
     *
     * @param lazyConstructor Lazy constructor function returning the promised value.
     */
    function Singleton(lazyConstructor) {
        this.lazy_constructor_ = lazyConstructor;
        this.mutex_ = new Mutex_1.Mutex();
        this.value_ = NOT_MOUNTED_YET;
    }
    /**
     * Reload value.
     *
     * The `Singleton.reload()` method enforces to call the *lazy constructor*, regardless of
     * whether the *lazy construction* has been completed or not. Therefore, even if the *lazy
     * construction* has been completed in sometime, the `Singleton.reload()` will call the *lazy
     * constructor* again.
     *
     * However, unlike {@link Singleton.get}(), `Singleton.reload()` does not ensure the safety
     * in the race condition. Therefore, you've to be careful by yourself when using this
     * `Singleton.reload()` method. Try not to call this method simultaneously.
     *
     * @return Re-constructed value.
     */
    Singleton.prototype.reload = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.value_ = NOT_MOUNTED_YET;
                        return [4 /*yield*/, this.get()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /* ---------------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------------- */
    /**
     * Get promised value.
     *
     * `Singleton.get()` method returns the *lazy constructed value*. It guarantees the *lazy
     * constructor* to be called *"only one at time"*. It ensures the *"only one at time"*, even
     * in the race condition.
     *
     * If the promised value is not constructed yet (call this method at the first time), the
     * *lazy constructor* would be called and returns the promised value. Otherwise, the promised
     * value has been already constructed by the *lazy constructor* (this method already had been
     * called), returns the pre-generated value.
     *
     * Also, you don't need to worry anything even race condition has been occured, calling
     * `Singleton.get()` simultaneously when the *lazy construction* is not completed but on
     * going. The `Singleton` guarantees the *lazy constructor* to be called only one at time by
     * using the *unique-lock* on a *mutex*.
     *
     * @return The *lazy constructed* value.
     */
    Singleton.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.value_ === NOT_MOUNTED_YET)) return [3 /*break*/, 2];
                        return [4 /*yield*/, UniqueLock_1.UniqueLock.lock(this.mutex_, function () { return __awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            // COULD BE COMPLETED DURING WAITING
                                            if (this.value_ !== NOT_MOUNTED_YET)
                                                return [2 /*return*/];
                                            // CALL THE LAZY-CONSTRUCTOR
                                            _a = this;
                                            return [4 /*yield*/, this.lazy_constructor_()];
                                        case 1:
                                            // CALL THE LAZY-CONSTRUCTOR
                                            _a.value_ = _b.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.value_];
                }
            });
        });
    };
    return Singleton;
}());
exports.Singleton = Singleton;
/**
 * @hidden
 */
var NOT_MOUNTED_YET = {};
//# sourceMappingURL=Singleton.js.map